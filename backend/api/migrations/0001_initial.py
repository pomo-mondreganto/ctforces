# Generated by Django 3.0.3 on 2020-02-09 22:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import stdimage.models
from django.conf import settings
from django.db import migrations, models

import api.models.auxiliary


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('rating', models.IntegerField(default=2000)),
                ('max_rating', models.IntegerField(default=2000)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_solve', models.DateTimeField(default=django.utils.timezone.now)),
                ('has_participated_in_rated_contest', models.BooleanField(default=False)),
                ('show_in_ratings', models.BooleanField(default=True)),
                ('last_email_resend', models.DateTimeField(blank=True, null=True)),
                ('avatar', stdimage.models.StdImageField(default='avatars/default_avatar.png',
                                                         upload_to=api.models.auxiliary.CustomUploadTo(path='',
                                                                                                       random_filename=True,
                                                                                                       upload_type='avatars'),
                                                         validators=[api.models.auxiliary.CustomImageSizeValidator(
                                                             max_limit=(1500, 1500), min_limit=(150, 150), ratio=2)])),
                ('telegram', models.CharField(blank=True, max_length=255)),
                ('hide_personal_info', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('id',),
                'permissions': (('view_personal_info', "Can view user's personal information"),),
                'default_manager_name': 'objects',
            },
            managers=[
                ('upsolving_annotated', api.models.auxiliary.UserUpsolvingAnnotatedManager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('is_running', models.BooleanField(default=False)),
                ('is_finished', models.BooleanField(default=False)),
                ('is_registration_open', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('publish_tasks_after_finished', models.BooleanField(default=True)),
                ('is_rated', models.BooleanField(default=True)),
                ('always_recalculate_rating', models.BooleanField(default=False)),
                ('dynamic_scoring', models.BooleanField(default=False)),
                ('team_only', models.BooleanField(default=False)),
                ('celery_start_task_id', models.CharField(blank=True, max_length=50, null=True)),
                ('celery_end_task_id', models.CharField(blank=True, max_length=50, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_name='contests_authored', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('flag', models.CharField(max_length=100)),
                ('cost', models.IntegerField(default=50)),
                ('is_published', models.BooleanField(default=False)),
                ('show_on_main_page', models.BooleanField(default=False)),
                ('publication_time', models.DateTimeField(blank=True, null=True)),
                ('uses_external_container', models.BooleanField(default=False)),
                ('external_container_name', models.CharField(blank=True, max_length=255, null=True)),
                ('status',
                 models.CharField(choices=[('UP', 'Up & running'), ('DN', 'Down')], default='DN', max_length=2)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_name='authored_tasks', to=settings.AUTH_USER_MODEL)),
                ('solved_by',
                 models.ManyToManyField(blank=True, related_name='solved_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='TaskTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name',
                 models.CharField(max_length=15, unique=True, validators=[api.models.auxiliary.TagNameValidator])),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('join_token', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('captain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='teams_captain', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(blank=True, related_name='teams', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskHint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_published', models.BooleanField(default=False)),
                ('body', models.TextField(blank=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_name='authored_hints', to=settings.AUTH_USER_MODEL)),
                ('task',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hints', to='api.Task')),
            ],
        ),
        migrations.CreateModel(
            name='TaskFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('upload_time', models.DateTimeField(auto_now_add=True)),
                ('file_field', api.models.auxiliary.CustomFileField(
                    upload_to=api.models.auxiliary.CustomUploadTo(append_random=True, path='', upload_type='files'))),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            related_name='files', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                           related_name='files', to='api.Task')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='task',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='tasks', to='api.TaskTag'),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('is_published', models.BooleanField(default=False)),
                ('show_on_main_page', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at', '-id'),
            },
        ),
        migrations.CreateModel(
            name='ContestTaskRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.IntegerField(default=0)),
                ('min_cost', models.IntegerField(default=0)),
                ('max_cost', models.IntegerField(default=0)),
                ('decay_value', models.IntegerField(default=1)),
                ('ordering_number', models.IntegerField(default=0)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='contest_task_relationship', to='api.Contest')),
                ('main_tag', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='contest_task_relationship_main', to='api.TaskTag')),
                ('solved_by', models.ManyToManyField(blank=True, related_name='solved_contest_tasks', to='api.Team')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='contest_task_relationship', to='api.Task')),
            ],
            options={
                'ordering': ('-ordering_number', 'cost', 'id'),
                'unique_together': {('contest', 'task')},
            },
        ),
        migrations.CreateModel(
            name='ContestParticipantRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_solve', models.DateTimeField(default=django.utils.timezone.now)),
                ('delta', models.IntegerField(blank=True, null=True)),
                ('has_opened_contest', models.BooleanField(default=False)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='contest_participant_relationship', to='api.Contest')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='contest_participant_relationship', to='api.Team')),
            ],
            options={
                'unique_together': {('contest', 'participant')},
            },
        ),
        migrations.AddField(
            model_name='contest',
            name='participants',
            field=models.ManyToManyField(blank=True, related_name='contests_participated',
                                         through='api.ContestParticipantRelationship', to='api.Team'),
        ),
        migrations.AddField(
            model_name='contest',
            name='tasks',
            field=models.ManyToManyField(blank=True, related_name='contests', through='api.ContestTaskRelationship',
                                         to='api.Task'),
        ),
    ]
